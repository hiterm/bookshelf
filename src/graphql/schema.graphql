type Author {
	id: ID!
	name: String!
}
type Book {
	id: String!
	title: String!
	authorIds: [String!]!
	isbn: String!
	read: Boolean!
	owned: Boolean!
	priority: Int!
	format: BookFormat!
	store: BookStore!
	createdAt: Int!
	updatedAt: Int!
	authors: [Author!]!
}
enum BookFormat {
	E_BOOK
	PRINTED
	UNKNOWN
}
enum BookStore {
	KINDLE
	UNKNOWN
}
input CreateAuthorInput {
	name: String!
}
input CreateBookInput {
	title: String!
	authorIds: [String!]!
	isbn: String!
	read: Boolean!
	owned: Boolean!
	priority: Int!
	format: BookFormat!
	store: BookStore!
}
type Mutation {
	registerUser: User!
	createBook(bookData: CreateBookInput!): Book!
	updateBook(bookData: UpdateBookInput!): Book!
	deleteBook(bookId: ID!): String!
	createAuthor(authorData: CreateAuthorInput!): Author!
}
type Query {
	loggedInUser: User
	book(id: ID!): Book
	books: [Book!]!
	author(id: ID!): Author
	authors: [Author!]!
}
input UpdateBookInput {
	id: String!
	title: String!
	authorIds: [String!]!
	isbn: String!
	read: Boolean!
	owned: Boolean!
	priority: Int!
	format: BookFormat!
	store: BookStore!
}
type User {
	id: ID!
}
schema {
	query: Query
	mutation: Mutation
}

