/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SigninRouteImport } from './routes/signin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as BooksIndexRouteImport } from './routes/books/index'
import { Route as AuthorsIndexRouteImport } from './routes/authors/index'
import { Route as BooksIdRouteImport } from './routes/books/$id'
import { Route as BooksIdEditRouteImport } from './routes/books/$id_.edit'

const SigninRoute = SigninRouteImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const BooksIndexRoute = BooksIndexRouteImport.update({
  id: '/books/',
  path: '/books/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthorsIndexRoute = AuthorsIndexRouteImport.update({
  id: '/authors/',
  path: '/authors/',
  getParentRoute: () => rootRouteImport,
} as any)
const BooksIdRoute = BooksIdRouteImport.update({
  id: '/books/$id',
  path: '/books/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const BooksIdEditRoute = BooksIdEditRouteImport.update({
  id: '/books/$id_/edit',
  path: '/books/$id/edit',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/signin': typeof SigninRoute
  '/books/$id': typeof BooksIdRoute
  '/authors': typeof AuthorsIndexRoute
  '/books': typeof BooksIndexRoute
  '/books/$id/edit': typeof BooksIdEditRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/signin': typeof SigninRoute
  '/books/$id': typeof BooksIdRoute
  '/authors': typeof AuthorsIndexRoute
  '/books': typeof BooksIndexRoute
  '/books/$id/edit': typeof BooksIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/signin': typeof SigninRoute
  '/books/$id': typeof BooksIdRoute
  '/authors/': typeof AuthorsIndexRoute
  '/books/': typeof BooksIndexRoute
  '/books/$id_/edit': typeof BooksIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/signin'
    | '/books/$id'
    | '/authors'
    | '/books'
    | '/books/$id/edit'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/signin' | '/books/$id' | '/authors' | '/books' | '/books/$id/edit'
  id:
    | '__root__'
    | '/'
    | '/signin'
    | '/books/$id'
    | '/authors/'
    | '/books/'
    | '/books/$id_/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SigninRoute: typeof SigninRoute
  BooksIdRoute: typeof BooksIdRoute
  AuthorsIndexRoute: typeof AuthorsIndexRoute
  BooksIndexRoute: typeof BooksIndexRoute
  BooksIdEditRoute: typeof BooksIdEditRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/books/': {
      id: '/books/'
      path: '/books'
      fullPath: '/books'
      preLoaderRoute: typeof BooksIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/authors/': {
      id: '/authors/'
      path: '/authors'
      fullPath: '/authors'
      preLoaderRoute: typeof AuthorsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/books/$id': {
      id: '/books/$id'
      path: '/books/$id'
      fullPath: '/books/$id'
      preLoaderRoute: typeof BooksIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/books/$id_/edit': {
      id: '/books/$id_/edit'
      path: '/books/$id/edit'
      fullPath: '/books/$id/edit'
      preLoaderRoute: typeof BooksIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SigninRoute: SigninRoute,
  BooksIdRoute: BooksIdRoute,
  AuthorsIndexRoute: AuthorsIndexRoute,
  BooksIndexRoute: BooksIndexRoute,
  BooksIdEditRoute: BooksIdEditRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
